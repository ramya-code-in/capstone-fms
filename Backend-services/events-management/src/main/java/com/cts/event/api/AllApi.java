/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cts.event.api;

import com.cts.event.model.Event;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-03-11T17:22:38.996+05:30")

@Api(value = "all", description = "the all API")
public interface AllApi {

	Logger log = LoggerFactory.getLogger(AllApi.class);

	default Optional<ObjectMapper> getObjectMapper() {
		return Optional.empty();
	}

	default Optional<HttpServletRequest> getRequest() {
		return Optional.empty();
	}

	default Optional<String> getAcceptHeader() {
		return getRequest().map(r -> r.getHeader("Accept"));
	}

	@ApiOperation(value = "", nickname = "allGet", notes = "get all events", response = Event.class, tags = {
			"Dashboard", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "fetch", response = Event.class),
			@ApiResponse(code = 404, message = "No DataFound") })
	// @RequestMapping(value = "/all",
	// produces = { "application/json" },
	// method = RequestMethod.GET)
	@GetMapping("/all")
	@CrossOrigin
	default Flux<Event> allGet(@PathVariable(name = "poc", required = false) Integer poc) {
		return Flux.just();
	}

	@PostMapping("/addEvents")
	default Flux<ResponseEntity<Event>> addEvents(@RequestBody List<Event> events) {
		return Flux.just(new ResponseEntity<>(HttpStatus.ACCEPTED));

	}

	@CrossOrigin
	@GetMapping("/dashboard")
	default Flux<Integer> dashboard() {
		return Flux.just();
	}

	@GetMapping("/volunteers")
	default Mono<ResponseEntity<Integer>> countNoOfVolunteers() {
		return Mono.just(new ResponseEntity<>(HttpStatus.ACCEPTED));
	}

}
