/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cts.event.api;

import java.io.IOException;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.cts.event.model.Event;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import reactor.core.publisher.Mono;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-03-11T17:22:38.996+05:30")

@Api(value = "eventid", description = "the eventid API")
public interface EventidApi {

	Logger log = LoggerFactory.getLogger(EventidApi.class);

	default Optional<ObjectMapper> getObjectMapper() {
		return Optional.empty();
	}

	default Optional<HttpServletRequest> getRequest() {
		return Optional.empty();
	}

	default Optional<String> getAcceptHeader() {
		return getRequest().map(r -> r.getHeader("Accept"));
	}

	@ApiOperation(value = "", nickname = "eventidEventIdGet", notes = "get event by id", response = Event.class, tags = {
			"Dashboard", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "fetch", response = Event.class),
			@ApiResponse(code = 404, message = "No DataFound") })
	@RequestMapping(value = "/eventid/{eventId}", produces = { "application/json" }, method = RequestMethod.GET)
	default Mono<Event> eventidEventIdGet(@ApiParam(value = "", required = true) @PathVariable("eventId") int eventId) {
		System.out.println("event/eventid");
		return Mono.just(null);
	}

	@PostMapping("/addEvent")
	default Mono<ResponseEntity<Event>> addEvent(@RequestBody Event event) {
		return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

	}

	@PutMapping("/update/{eventId}")
	default Mono<ResponseEntity<Event>> updateEvent(@RequestBody Event event, @PathVariable("eventId") String eventId) {
		return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
	}

	@CrossOrigin
	@GetMapping("/byid/{id}")
	default Mono<ResponseEntity<Event>> findById(@PathVariable("id") int id) {
		return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));

	}

}
