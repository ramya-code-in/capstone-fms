/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cts.user.api;

import com.cts.user.model.User;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.swagger.annotations.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-02-20T16:20:33.095+05:30")

@Api(value = "login", description = "the login API")
public interface LoginApi {

	Logger log = LoggerFactory.getLogger(LoginApi.class);

	default Optional<ObjectMapper> getObjectMapper() {
		return Optional.empty();
	}

	default Optional<HttpServletRequest> getRequest() {
		return Optional.empty();
	}

	default Optional<String> getAcceptHeader() {
		return getRequest().map(r -> r.getHeader("Accept"));
	}

	@ApiOperation(value = "", nickname = "loginPost", notes = "get user by id", response = User.class, tags = {
			"login user", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "user logged in", response = User.class),
			@ApiResponse(code = 404, message = "No DataFound") })
	@RequestMapping(value = "/login", produces = { "application/json" }, method = RequestMethod.GET)
	default Mono<ResponseEntity<Map<String, String>>> loginPost(
			@ApiParam(value = "") @RequestHeader(value = "Authorization", required = false) String authHeader) {
		// if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
		// if (getAcceptHeader().get().contains("application/json")) {
		// try {
		// return Mono.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
		// } catch (IOException e) {
		// log.error("Couldn't serialize response for content type application/json",
		// e);
		// return Mono.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
		// }
		// }
		// } else {
		// log.warn("ObjectMapper or HttpServletRequest not configured in default
		// LoginApi interface so no example is generated");
		// }
		return Mono.just(new ResponseEntity<>(HttpStatus.ACCEPTED));
	}

	@PutMapping("/role/{employeeId}")
	default Mono<ResponseEntity<User>> configureRole(@PathVariable int employeeId, @RequestBody String role) {
		return Mono.just(new ResponseEntity<>(HttpStatus.ACCEPTED));
	}
}
